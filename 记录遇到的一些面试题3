1、实现extend函数
对象浅拷贝
 function extend(target,source){
    for(var p in source){
        if(source.hasOwnProperty(p)){
            target[p]=source[p]
        }
    }
    return target
}
//test
var a={test:1};
var b={test2:2};
extend(a,b);
console.log(a);//output `{ test: 1, test2: 2 }`

最简单的对象深拷贝
b = JSON.parse( JSON.stringify(a) )
不过这有局限性：

无法复制函数
原型链没了，对象就是object，所属的类没了。

2、promise原理
参考文章：https://segmentfault.com/a/1190000009478377
现在回顾下Promise的实现过程，其主要使用了设计模式中的观察者模式：
通过Promise.prototype.then和Promise.prototype.catch方法将观察者方法注册到被观察者Promise对象中，同时返回一个新的Promise对象，以便可以链式调用。
被观察者管理内部pending、fulfilled和rejected的状态转变，同时通过构造函数中传递的resolve和reject方法以主动触发状态转变和通知观察者。

